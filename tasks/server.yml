---
- name: search for the latest rhel 7 ami
  ec2_ami_find:
    region: eu-central-1
    owner: "309956199498"
    name: "RHEL-7.3*"
  register: find_results

- debug: 
    msg: "{{find_results}}"
    verbosity: 2
    
- ec2_vpc_net_facts:
    region: eu-central-1
    filters:
      "tag:Name": Production VPC
  register: network

- set_fact:
    vpc_id: "{{ network.vpcs[0].id }}"

- ec2_vpc_subnet_facts:
    region: eu-central-1
    filters:
      vpc-id: "{{ vpc_id }}"
  register: vpc_nets
- set_fact:
    subnets: "{{ vpc_nets.subnets | map(attribute='id') | list }}"

- ec2_group:
    name: webservers
    region: eu-central-1
    description: Security group to allow public web traffic to the unicorn.rentals API
    vpc_id: "{{ vpc_id }}"
    rules:
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
  register: web_sg
- debug:
    msg: "Created VPC security group called webservers, ID {{ web_sg.group_id }} to take web traffic"
    verbosity: 2
- ec2_group:
    name: public-ssh
    region: eu-central-1
    description: Security group for public SSH traffic (you may want to restrict this a bit...)
    vpc_id: "{{ vpc_id }}"
    rules:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
  register: ssh_sg
- debug:
    msg: "Created VPC security group called public-ssh, ID {{ ssh_sg.group_id }} for granting SSH access to servers."
    verbosity: 2

- ec2_group:
    name: elb-group
    region: eu-central-1
    description: Security group for LB to have VPC endpoints in
    vpc_id: "{{ vpc_id }}"
    rules:
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
  register: elb_group

- ec2_elb_lb:
    name: "unicorn-asg"
    state: present
    cross_az_load_balancing: "yes"
    region: eu-central-1
    security_group_ids:
      - "{{ elb_group.group_id }}"
    subnets: "{{ subnets }}"
    listeners:
      - protocol: http
        load_balancer_port: 80
        instance_port: 8080
    health_check:
      ping_protocol: http
      ping_port: 80
      ping_path: /
      interval: 30 # seconds
      unhealthy_threshold: 2
      healthy_threshold: 2
      response_timeout: 5 # seconds

- ec2_lc:
    name: "{{ launch_config }}"
    region: eu-central-1
    key_name: "{{ ssh_key_name }}"
    assign_public_ip: yes
    image_id: "{{find_results.results[0].ami_id}}"
    security_groups:
      - "{{ web_sg.group_id }}"
      - "{{ ssh_sg.group_id }}"
    instance_type: t2.micro
    instance_monitoring: yes
    user_data: "{{ lookup('template', 'templates/userdata.txt.j2') }}"

- name: Create auto-scaling group with size 1
  ec2_asg:
    name: "{{ autoscaling_group }}"
    health_check_period: 90
    default_cooldown: 60
    load_balancers: unicorn-asg
    vpc_zone_identifier: "{{ subnets }}"
    launch_config_name: "{{ launch_config }}"
    health_check_type: EC2
    replace_all_instances: true
    min_size: 1
    max_size: 1
    desired_capacity: 1
    wait_for_instances: true
    region: eu-central-1
